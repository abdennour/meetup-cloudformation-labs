---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  An AWS Lambda creates the HTML file, upload it to S3, 
  the EC2 instance download the HTML file from S3 and server it as static website
  using Nginx

Parameters:
  HtmlPageContent:
    Type: String
    Default: "Hello AWS Heros!"

Mapping:
  RegionToEc2Image:
    us-east-1: # Virginia
      amzonLinux2: ami-035be7bafff33b6b6
      ubuntu: ami-0ac019f4fcb7cb7e6
    eu-west-1: # Ireland
      amzonLinux2: ami-0fad7378adf284ce0
      ubuntu: ami-00035f41c82244dab
Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    
  MyWebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionToEc2Image, !Ref 'AWS::Region', amzonLinux2]
      InstanceType: t2.micro
      InstanceProfile: !ImportValue EC2ProfileS3ReadAccess
      SecurityGroups:
        - !ImportValue WebAccess 
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          yum update -y
          yum install nginx -y
      
          systemctl start nginx
          systemctl enable nginx;
          aws s3 sync s3://${bucket} /usr/share/nginx/html --region ${region} 
        - region: !Ref AWS::Region
          bucket: !Ref MyBucket
  GenerateHtmlFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Runtime: "nodejs8.10"
      Timeout: 120
      Role: !ImportValue LambdaRoleS3WriteAccess
      Code:
        ZipFile: |
         const response= require('cfn-response');
         const AWS = require('aws-sdk');
        const s3 = new AWS.S3();

         function uploadHtmlIndexFile( content,  destinationBucket) {

           const htmlContent = `
            <html>
              <title>Meetup 25</title>
              <body style="display:flex; width:100%;height:100vh;justify-content:center">
                <h1 style="color: orange">${content}</h1>
              </body>
            </html>
           `;

           return new Promise((resolve, reject) => {
              
              s3.putObject({
                Bucket: destinationBucket,
                Key: 'index.html',
                Body: new Buffer(htmlContent, 'binary')
              }, function (err) {
                if (err) { 
                  reject(err);
                }
                resolve();
              });
           })
         }
         exports.handler = (event, context) =>  {
  
           if (event.RequestType === 'Delete') {
              return response.send(event, context, response.SUCCESS);
           }

           if (event.RequestType === 'Create') {
             const content= event.ResourceProperties.HtmlContent;
             const bucket= event.ResourceProperties.Bucket;
             uploadHtmlIndexFile(content, bucket).then(() => {
                response.send(event, context, response.SUCCESS, {});
             }).catch((error) => {
               console.log(error);
               return response.send(event, context, response.SUCCESS);
             });
           }
         };
  HtmlGenerator:
    Type: Custom::GenerateHtmlFunction
    Properties:
      ServiceToken: !GetAtt GenerateHtmlFunction.Arn
      HtmlContent: !Ref HtmlPageContent
      Bucket: !Ref MyBucket
      