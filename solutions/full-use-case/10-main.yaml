---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  An AWS Lambda creates the HTML file, upload it to S3, 
  the EC2 instance download the HTML file from S3 and server it as static website
  using Nginx

Mappings:
  RegionToEc2Image:
    us-east-1: # Virginia
      amzonLinux2: ami-035be7bafff33b6b6
      ubuntu: ami-0ac019f4fcb7cb7e6
    eu-west-1: # Ireland
      amzonLinux2: ami-0fad7378adf284ce0
      ubuntu: ami-00035f41c82244dab

Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    
  MyWebServerVM:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionToEc2Image, !Ref 'AWS::Region', amzonLinux2]
      InstanceType: t2.micro
      IamInstanceProfile: !ImportValue EC2ProfileS3ReadAccess
      SecurityGroups:
        - !ImportValue WebAccess
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          yum update -y
          # yum install nginx -y
          amazon-linux-extras install nginx1.12 -y

          systemctl start nginx
          systemctl enable nginx
          (crontab -l 2>/dev/null; echo "*/1 * * * * aws s3 sync s3://${bucket} /usr/share/nginx/html --region ${region} --exact-timestamps") | crontab -
          
        - region: !Ref AWS::Region
          bucket: !Ref MyBucket
  GenerateHtmlFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Runtime: "nodejs8.10"
      Timeout: 120
      Role: !ImportValue LambdaRoleS3WriteAccess
      Code:
        ZipFile: |
         const response= require('cfn-response');
         const AWS = require('aws-sdk');
         const s3 = new AWS.S3();
         
         function getHtml(content, backgroundColor) {
           return [
             '<!doctype html>',
             '<html>',
              '<head>',
              '  <title>Meetup 25</title> ',
              '  <style>.fullscreen {display:flex; width:100%;height:100vh;justify-content:center;align-items:center}</style>',
              '</head>',
              '<body style="background: '+ backgroundColor +';" class="fullscreen">',
              '  <h1 style="color: white;font-size: 60px;">'+ content +'</h1>',

              '</body>',
            '</html>'
           ].join('\n');
         };

         function uploadFile( fileName, content, destinationBucket) {
           return new Promise((resolve, reject) => {
              
              s3.putObject({
                Bucket: destinationBucket,
                Key: fileName,
                Body: new Buffer(content, 'binary')
              }, function (err) {
                if (err) { 
                  reject(err);
                }
                resolve();
              });
           })
         }
         exports.handler = (event, context) =>  {
            
            const content= event.ResourceProperties.HtmlContent;
            const backgroundColor = event.ResourceProperties.HtmlBackgroundColor;
            const bucket= event.ResourceProperties.Bucket;
            const fileName = event.ResourceProperties.HtmlFileName;
  
           if (event.RequestType === 'Delete') {
              s3.deleteObject({
                Bucket: bucket,
                Key: fileName
              });
              return response.send(event, context, response.SUCCESS);
           }

           if (event.RequestType === 'Create' || event.RequestType === 'Update') {

             const htmlContent = getHtml(content, backgroundColor);

             uploadFile(fileName, htmlContent, bucket).then(() => {
                response.send(event, context, response.SUCCESS, {});
             }).catch((error) => {
               console.log(error);
               return response.send(event, context, response.SUCCESS);
             });
           }
         };

  DNSRecord:
    Type: AWS::Route53::RecordSet
    # DependsOn: MyWebServerVM
    Properties:
      HostedZoneName: !Join ['', [!Ref DomainName, '.']]
      Name: !Join ['', [!Ref SubdomainName, '.']]
      Type: A
      TTL: '60'
      ResourceRecords:
      - !GetAtt MyWebServerVM.PublicIp

  DNSRecord:
    Type: AWS::Route53::RecordSet
    # DependsOn: MyWebServerVM
    Properties:
      HostedZoneName: !Join ['', [!Ref DomainName, '.']]
      Name: !Join ['', [!Ref SubdomainName, '.']]
      Type: A
      TTL: '60'
      ResourceRecords:
      - !GetAtt MyWebServerVM.PublicIp


Outputs:
  FQDN:
    Value: !Sub 'http://${SubdomainName}'
  WebsiteURL:
    Value:
      !Sub 'http://${MyWebServerVM.PublicDnsName}'
    Description: URL For the website
  HtmlGeneratorFunctionArn:
    Value: !GetAtt GenerateHtmlFunction.Arn
    Export:
      Name: HtmlGeneratorFunctionArn
  Bucket:
    Value:  !Ref MyBucket
    Description: Bucket for Generated HTML files
    Export:
      Name: BucketGeneratedHtmlFiles